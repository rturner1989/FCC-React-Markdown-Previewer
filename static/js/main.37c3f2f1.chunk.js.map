{"version":3,"sources":["Components/AppHeader.js","Markdown/Data.md","Context.js","Components/Editor.js","Components/Preview.js","Components/FormContainer.js","App.js","index.js"],"names":["AppHeader","className","AppContext","React","createContext","AppProvider","children","windowState","EDITOR","PREVIEW","NONE","useState","editorText","setEditorText","previewMarkdown","setPreviewMarkdown","windowFullscreen","setWindowFullscreen","editorPlaceHolder","setEditorPlaceHolder","fetchInitialText","a","fetch","initialText","response","text","data","useEffect","updatePreviewText","marked","setOptions","breaks","importMarked","clean","DOMPurify","sanitize","USE_PROFILES","html","Provider","value","maximiseEditor","maximisePreview","placeholder","useGlobalContext","useContext","Editor","editorRef","useRef","current","classList","add","remove","ref","id","onClick","focusable","htmlFor","name","autoFocus","onChange","e","target","Preview","previewRef","dangerouslySetInnerHTML","__html","FormContainer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37c3f2f1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst AppHeader = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1 className=\"header-text\">Markdown Previewer</h1>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default AppHeader;\r\n","export default __webpack_public_path__ + \"static/media/Data.98c01269.md\";","import React, { useContext, useState, useEffect } from \"react\";\r\nimport marked from \"marked\";\r\nimport DOMPurify from \"dompurify\";\r\nimport initialText from \"./Markdown/Data.md\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n    const windowState = { EDITOR: \"EDITOR\", PREVIEW: \"PREVIEW\", NONE: \"NONE\" };\r\n    const [editorText, setEditorText] = useState(\"\");\r\n    const [previewMarkdown, setPreviewMarkdown] = useState(\"\");\r\n    const [windowFullscreen, setWindowFullscreen] = useState(windowState.NONE);\r\n    const [editorPlaceHolder, setEditorPlaceHolder] = useState(\"\");\r\n\r\n    const fetchInitialText = async () => {\r\n        const response = await fetch(initialText);\r\n        const data = await response.text();\r\n        setEditorText(data);\r\n    };\r\n\r\n    const placeholder = () => {\r\n        setEditorPlaceHolder(editorText);\r\n        setEditorText(\"\");\r\n    };\r\n\r\n    const maximiseEditor = () => {\r\n        switch (windowFullscreen) {\r\n            case windowState.EDITOR:\r\n                setWindowFullscreen(windowState.NONE);\r\n                break;\r\n            case windowState.PREVIEW:\r\n                setWindowFullscreen(windowState.EDITOR);\r\n                break;\r\n            case windowState.NONE:\r\n                setWindowFullscreen(windowState.EDITOR);\r\n                break;\r\n        }\r\n    };\r\n    const maximisePreview = () => {\r\n        switch (windowFullscreen) {\r\n            case windowState.EDITOR:\r\n                setWindowFullscreen(windowState.PREVIEW);\r\n                break;\r\n            case windowState.PREVIEW:\r\n                setWindowFullscreen(windowState.NONE);\r\n                break;\r\n            case windowState.NONE:\r\n                setWindowFullscreen(windowState.PREVIEW);\r\n                break;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchInitialText();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updatePreviewText();\r\n    }, [editorText]);\r\n\r\n    const updatePreviewText = () => {\r\n        marked.setOptions({ breaks: true });\r\n        const importMarked = marked(editorText);\r\n        const clean = DOMPurify.sanitize(importMarked, {\r\n            USE_PROFILES: { html: true },\r\n        });\r\n        setPreviewMarkdown(clean);\r\n    };\r\n\r\n    return (\r\n        <AppContext.Provider\r\n            value={{\r\n                windowState,\r\n                editorText,\r\n                previewMarkdown,\r\n                windowFullscreen,\r\n                editorPlaceHolder,\r\n                setEditorText,\r\n                setPreviewMarkdown,\r\n                updatePreviewText,\r\n                setWindowFullscreen,\r\n                maximiseEditor,\r\n                maximisePreview,\r\n                placeholder,\r\n            }}\r\n        >\r\n            {children}\r\n        </AppContext.Provider>\r\n    );\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\nexport const useGlobalContext = () => {\r\n    return useContext(AppContext);\r\n};\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport { GiExpand, GiContract } from \"react-icons/gi\";\r\nimport { GoTrashcan } from \"react-icons/go\";\r\n\r\nconst Editor = () => {\r\n    const {\r\n        editorText,\r\n        maximiseEditor,\r\n        windowState,\r\n        windowFullscreen,\r\n        placeholder,\r\n        editorPlaceHolder,\r\n        setEditorText,\r\n    } = useGlobalContext();\r\n\r\n    const editorRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        switch (windowFullscreen) {\r\n            case windowState.EDITOR:\r\n                editorRef.current.classList.add(\"window-max\");\r\n                editorRef.current.classList.remove(\"window-hidden\");\r\n                break;\r\n            case windowState.PREVIEW:\r\n                editorRef.current.classList.add(\"window-hidden\");\r\n                editorRef.current.classList.remove(\"window-max\");\r\n                break;\r\n            case windowState.NONE:\r\n                editorRef.current.classList.remove(\"window-max\");\r\n                editorRef.current.classList.remove(\"window-hidden\");\r\n                break;\r\n        }\r\n    }, [windowFullscreen]);\r\n\r\n    return (\r\n        <section className=\"markdown-editor\" ref={editorRef}>\r\n            <div id=\"editor-navbar\">\r\n                <h1 id=\"editor-header\">Editor</h1>\r\n                <div className=\"btn-container\">\r\n                    <button className=\"clear\" onClick={placeholder}>\r\n                        <span className=\"label-hidden\">Clear</span>\r\n                        <GoTrashcan aria-hidden={true} focusable={false} />\r\n                    </button>\r\n                    {windowFullscreen === windowState.EDITOR ? (\r\n                        <button className=\"contract\" onClick={maximiseEditor}>\r\n                            <span className=\"label-hidden\">Contract</span>\r\n                            <GiContract aria-hidden={true} focusable={false} />\r\n                        </button>\r\n                    ) : (\r\n                        <button className=\"expand\" onClick={maximiseEditor}>\r\n                            <span className=\"label-hidden\">Expand</span>\r\n                            <GiExpand aria-hidden={true} focusable={false} />\r\n                        </button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            <label htmlFor=\"editor\" className=\"label-hidden\">\r\n                Markdown Editor\r\n            </label>\r\n            <textarea\r\n                placeholder={editorPlaceHolder}\r\n                name=\"editor\"\r\n                id=\"editor\"\r\n                autoFocus={true}\r\n                value={editorText}\r\n                onChange={(e) => setEditorText(e.target.value)}\r\n            />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import React, { useRef, useEffect } from \"react\";\r\nimport { useGlobalContext } from \"../Context\";\r\nimport { GiExpand, GiContract } from \"react-icons/gi\";\r\n\r\nconst Preview = () => {\r\n    const { previewMarkdown, maximisePreview, windowState, windowFullscreen } =\r\n        useGlobalContext();\r\n\r\n    const previewRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        switch (windowFullscreen) {\r\n            case windowState.EDITOR:\r\n                previewRef.current.classList.add(\"window-hidden\");\r\n                previewRef.current.classList.remove(\"window-max\");\r\n                break;\r\n            case windowState.PREVIEW:\r\n                previewRef.current.classList.add(\"window-max\");\r\n                previewRef.current.classList.remove(\"window-hidden\");\r\n                break;\r\n            case windowState.NONE:\r\n                previewRef.current.classList.remove(\"window-max\");\r\n                previewRef.current.classList.remove(\"window-hidden\");\r\n                break;\r\n        }\r\n    }, [windowFullscreen]);\r\n\r\n    return (\r\n        <section className=\"markdown-previewer\" ref={previewRef}>\r\n            <div id=\"preview-navbar\">\r\n                <h1>Preview</h1>\r\n                {windowFullscreen === windowState.PREVIEW ? (\r\n                    <button className=\"contract\" onClick={maximisePreview}>\r\n                        <span className=\"label-hidden\">Contract</span>\r\n                        <GiContract aria-hidden={true} focusable={false} />\r\n                    </button>\r\n                ) : (\r\n                    <button className=\"expand\" onClick={maximisePreview}>\r\n                        <span className=\"label-hidden\">Expand</span>\r\n                        <GiExpand aria-hidden={true} focusable={false} />\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <div\r\n                id=\"preview\"\r\n                dangerouslySetInnerHTML={{ __html: previewMarkdown }}\r\n            />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Preview;\r\n","import React from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport Preview from \"./Preview\";\r\n\r\nconst FormContainer = () => {\r\n    return (\r\n        <div id=\"editor-preview-container\">\r\n            <Editor />\r\n            <Preview />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormContainer;\r\n","import React from \"react\";\nimport AppHeader from \"./Components/AppHeader\";\nimport FormContainer from \"./Components/FormContainer\";\n\nfunction App() {\n    return (\n        <main className=\"App\">\n            <AppHeader />\n            <FormContainer />\n        </main>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { AppProvider } from \"./Context\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppProvider>\n            <App />\n        </AppProvider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}